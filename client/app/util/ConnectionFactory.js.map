{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","Error","onerror","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA;;;;;;;;AAQI,kBAAMA,SAAS,CAAC,aAAD,CAAf;AACA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,QAAQ,IAAZ;;AAEK,kBAAMC,iBAAN,CAAwB;;AAEzB,uBAAOC,aAAP,GAAuB;AACnB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,4BAAIN,UAAJ,EAAgB,OAAOK,QAAQL,UAAR,CAAP;;AAEhB,8BAAMO,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;AACAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/BT,8CAAkBU,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,yBAFD;;AAIAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBX,yCAAaW,EAAEE,MAAF,CAASC,MAAtB;;AAEAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,MAAK;AACpB,sCAAM,IAAIgB,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGAZ,oCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,yBARD;;AAUAP,oCAAYW,OAAZ,GAAsBP,KAAK;AACvBL,mCAAOK,EAAEE,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,yBAFD;AAGH,qBArBM,CAAP;AAsBH;;AAED,uBAAOR,aAAP,CAAqBZ,UAArB,EAAiC;AAC7BD,2BAAOsB,OAAP,CAAeC,SAAS;AACpB,4BAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACItB,WAAWyB,iBAAX,CAA6BH,KAA7B;;AAEJtB,mCAAW0B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,qBALD;AAMH;AACD,uBAAOC,eAAP,GAAwB;AACpB,wBAAG5B,UAAH,EAAc;AACVC;AACH;AACJ;;AAvCwB","file":"ConnectionFactory.js","sourcesContent":["/*Criando módulo para que as propriedadesos \ne métodos privados não sejam acessados.\n\nA classe é retornada para que a mesma possa ser acessada\n\nno escopo global.\n\n*/\n    const stores = ['negociacoes'];\n    let connection = null;\n    let close = null;\n\n  export class ConnectionFactory {\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                if (connection) return resolve(connection);\n\n                const openRequest = indexedDB.open('jscangaceiro', 3);\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n                    connection = e.target.result;\n\n                    close = connection.close.bind(connection);\n                    connection.close = () =>{\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n                    resolve(e.target.result);\n                };\n\n                openRequest.onerror = e => {\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStores(connection) {\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n        static closeConnection(){\n            if(connection){\n                close();\n            }\n        }\n\n    }\n"]}